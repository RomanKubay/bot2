from aiogram import Bot, Dispatcher, executor, types
import logging
logging.basicConfig(level=logging.INFO)

import config
import goroh
import database as db
import keyboards as kb

# –¶–µ –¥–ª—è —Ç–æ–≥–æ, —â–æ–±–∏ –±–æ—Ç –ø—Ä–∞—Ü—é–≤–∞–≤ —É streamlit.io
import asyncio
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# Load bot
bot = Bot(token=config.API_KEY)
dp = Dispatcher(bot)
temp = {}

async def menu(user_id:int):
    msg = await bot.send_message(user_id, "–©–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–±–∏—Ç–∏?", reply_markup=kb.menu)
    db.set_lm(user_id, msg.message_id)

async def next_sort(user_id:int):
    task = db.get_task_sort(user_id)
    if task is None:
        await bot.send_message(user_id, f'‚ùå –ü–æ–º–∏–ª–∫–∞!\n–°—Ö–æ–∂–µ, —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å.\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ä–µ–∂–∏–º.', reply_markup=kb.to_menu)
        return
    msg = await bot.send_message(user_id, f'üóÉ <i>–†–µ–∂–∏–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è </i>\n<b>–ß–∏—Ç–∞–π—Ç–µ —É–≤–∞–∂–Ω–æ‚ùóÔ∏è</b>\n\n–ö—É–¥–∏ –≤—ñ–¥–Ω–æ—Å–∏—Ç–∏ —Å–ª–æ–≤–æ <b>"{task["word"]}"</b>?\n<i>(–ß–∞—Å—Ç–æ—Ç–∞: {task["rate"]})</i>', "HTML", reply_markup=kb.sort(task["word"]))
    db.set_lm(user_id, msg.message_id)

async def next_heard(user_id:int):
    task = db.get_task_heard(user_id)
    if task is None:
        await bot.send_message(user_id, f'‚ùå –ü–æ–º–∏–ª–∫–∞!\n–°—Ö–æ–∂–µ, —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å.\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ä–µ–∂–∏–º.', reply_markup=kb.to_menu)
        return # ({len(db.heard_tasks)} —Å–ª—ñ–≤)
    msg = await bot.send_message(user_id, f'üëÇüèª <i>–†–µ–∂–∏–º "–ß—É–ª–∏ —Å–ª–æ–≤–æ ..?"</i>\n<b>–ß–∏—Ç–∞–π—Ç–µ —É–≤–∞–∂–Ω–æ‚ùóÔ∏è</b>\n\n–í–∏ –∫–æ–ª–∏—Å—å —á—É–ª–∏ —Å–ª–æ–≤–æ <b>"{task["word"]}"</b>?\n<i>(–ß–∞—Å—Ç–æ—Ç–∞: {task["rate"]})</i>', "HTML", reply_markup=kb.heard(task["word"]))
    db.set_lm(user_id, msg.message_id)

async def send_last_actions(user_id:int, full:bool=False):
    if full: keyboard = kb.last_full
    else: keyboard = kb.last
    msg = await bot.send_message(user_id, db.get_last_actions(full), reply_markup=keyboard)
    db.set_lm(user_id, msg.message_id)

async def send_stats(user_id:int):
    stats = db.get_stats()
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüìã –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ —ñ–∑ –∑–∞–≤–¥–∞–Ω—å: <b>{stats['words']}</b>\n ‚ûú üóÉ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ª—ñ–≤: <b>{stats['sort']}</b>\n ‚ûú üëÇüèª \"–ß—É–ª–∏ —Å–ª–æ–≤–æ ..?\": <b>{stats['heard']}</b>\n ‚ûú ü§∑üèº –ù–µ –≤—ñ–¥–æ–º—ñ —Å–ª–æ–≤–∞ (–∑–∞–∫—Ä–∏—Ç–æ): <b>{stats['known']}</b>\n\nüíæ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∏—Ö —Å–ª—ñ–≤: <b>{stats['saved']}</b>\n‚Æ© <i>{stats['saved_split']}</i>\n\n  ‚ûú üü¢ –£ –õ–µ–≥–∫–æ: <b>{stats['easy']}</b>\n‚Æ© <i>{stats['easy_split']}</i>\n  ‚ûú üü† –£ –ù–æ—Ä–º–∞–ª—å–Ω–æ: <b>{stats['normal']}</b>\n‚Æ© <i>{stats['normal_split']}</i>\n  ‚ûú üî¥ –£ –°–∫–ª–∞–¥–Ω–æ: <b>{stats['hard']}</b>\n‚Æ© <i>{stats['hard_split']}</i>\n\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å: <b>{stats['complete']}</b>"

    for u in stats['users']: text += f"\n ‚Ä¢ {u[0]}: <b>{u[1]}</b>"

    msg = await bot.send_message(user_id, text, "HTML", reply_markup=kb.close)
    db.set_lm(user_id, msg.message_id)

@dp.message_handler(commands=['start'], commands_prefix='!/')
async def start_cmd(message: types.Message):
    await message.delete()
    if message.from_id in db.blacklist: await message.answer("‚ùå –û –ù–Ü! –í–ê–° –ó–ê–ë–ê–ù–ï–ù–û üò¢ü§Øüò≥üò°ü´£\n—Ç–∞ —à–æ–∂ —Ü–µ —Ç–≤–æ—Ä–∏—Ü—Ü—è?üè≥Ô∏è‚Äçüåà"); return
    elif message.from_id in db.whitelist:
        await del_last_msg(message.from_id)
        await menu(message.from_id)
    else: await message.answer("üëãüèΩ –ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–±–∏ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –ø–∞–Ω—É –†–æ–º—á–∏–∫—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –∑—ñ —Å–ª–æ–≤–∞–º–∏.\n–¢—É—Ç –Ω—ñ—á–æ–≥–æ —Å–∫–ª–∞–¥–Ω–æ–≥–æ –Ω–µ–º–∞—î. –í–∏–±–∏—Ä–∞—î—à –∑–∞–≤–¥–∞–Ω–Ω—è —ñ –≤–∏–∫–æ–Ω—É—î—à –π–æ–≥–æ. –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω—É –¥—É—É–∂–µ –ø—Ä–æ—Å—Ç—ñ.\n\n‚ùï –ê–ª–µ —Å–ø–æ—á–∞—Ç–∫—É –ø–∞–Ω –†–æ–º–∞–Ω—á–∏–∫ –ø–æ–≤–∏–Ω–µ–Ω –¥–æ–¥–∞—Ç–∏ –≤–∞—Å —É —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n–•–æ—á–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è?", reply_markup=kb.whitelist_add_me)

@dp.message_handler(commands=['menu'], commands_prefix='!/')
async def menu_cmd(message: types.Message):
    await message.delete()
    if message.from_id not in db.whitelist or message.from_id in db.blacklist: await message.answer("/start", kb.close); return
    await del_last_msg(message.from_id)
    await menu(message.from_id)

@dp.callback_query_handler(lambda callback_query: True)
async def callback(call: types.CallbackQuery):
    if call.from_user.id in db.blacklist: return
    db.get_lm(call.from_user.id)
    match (call.data):
        case 'close': pass
        case 'blank': await call.answer('–∫—É–¥–∞ —Ç–∏–∫–∞—î—à', cache_time=0); return
        case 'menu': await menu(call.from_user.id); db.update_user(call.from_user)
        case 'stats': await send_stats(call.from_user.id); await call.answer(); return
        case 'last': await send_last_actions(call.from_user.id)
        case 'last_full': await send_last_actions(call.from_user.id, True)
        case 'hints':
            msg = await call.message.answer('‚ùî –ü–æ—è—Å–Ω–µ–Ω–Ω—è\n\n‚Ä¢ –©–æ —Ç–∞–∫–µ "–ß–∞—Å—Ç–æ—Ç–∞"?\n ‚Äî –¶–µ —á–∞—Å—Ç–æ—Ç–∞ –≤–∂–∏–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞, –≤–∑—è—Ç–∞ —ñ–∑ —Å–∞–π—Ç—É goroh.pp.ua.\n–ß–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤–∞ "—Å–≤—è—Ç–æ": 11737 - –≤–∂–∏–≤–∞—î—Ç—å—Å—è —á–∞—Å—Ç–æ;\n–ß–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤–∞ "—Å–ª—ñ–≤—Ü–µ": 579 - –≤–∂–∏–≤–∞—î—Ç—å—Å—è —Ä—ñ–¥–∫–æ.\n\n', reply_markup=kb.close)
            db.set_lm(call.from_user.id, msg.message_id)
            await call.answer(); return

        case "start_sort": await next_sort(call.from_user.id)
        case "start_heard": await next_heard(call.from_user.id)

        case _:
            data = call.data.split("_")
            match data[0]:
                case 'about':
                    await call.message.answer(goroh.about(data[1]), reply_markup=kb.close)
                    await call.answer()
                    return
                
                case 'sort':
                    await next_sort(call.from_user.id)
                    db.sort_word(data[2], data[1], call.from_user.id)
                    await call.answer(f'{data[2]} ‚Üí {("üü¢ –õ–µ–≥–∫–æ", "üü† –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üî¥ –°–∫–ª–∞–¥–Ω–æ")[int(data[1])]}')
                    db.add_action(f'üóÉ {call.from_user.full_name} ‚Üí "{data[2]}" –¥–æ {("üü¢ –õ–µ–≥–∫–æ", "üü† –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üî¥ –°–∫–ª–∞–¥–Ω–æ")[int(data[1])]}')

                case 'heard':
                    await next_heard(call.from_user.id)
                    rate = db.get_rate_word(data[2], 'heard')
                    match data[1]:
                        case 'y':
                            level = int(rate > 200)
                            db.heard_word(data[2], level, call.from_user.id)
                            await call.answer(f'{data[2]} ‚Üí {("üî¥ –°–∫–ª–∞–¥–Ω–æ", "üü† –ù–æ—Ä–º–∞–ª—å–Ω–æ")[level]}')
                            db.add_action(f'üëÇüèª {call.from_user.full_name} —á—É–≤ "{data[2]}". –î–æ {("üî¥ –°–∫–ª–∞–¥–Ω–æ", "üü† –ù–æ—Ä–º–∞–ª—å–Ω–æ")[level]}')
                        case 'n':
                            if rate > 180:
                                db.heard_word(data[2], 0, call.from_user.id)
                                db.add_action(f'üëÇüèª {call.from_user.full_name} –Ω—ñ–∫–æ–ª–∏ –Ω–µ —á—É–≤ "{data[2]}". –î–æ üî¥ –°–∫–ª–∞–¥–Ω–æ')
                                await call.answer(f'{data[2]} ‚Üí üî¥ –°–∫–ª–∞–¥–Ω–æ')
                            else:
                                db.delete_task({'type': 'heard', 'word': data[2]})
                                db.add_action(f'üëÇüèª {call.from_user.full_name} –Ω—ñ–∫–æ–ª–∏ –Ω–µ —á—É–≤ "{data[2]}". ‚ùå –ù—ñ–∫—É–¥–∏ –Ω–µ –∑–∞–ø–∏—Å—É—î–º–æ')
                                await call.answer(f'{data[2]} ‚Üí ‚ùå –ù—ñ–∫—É–¥–∏ –Ω–µ –∑–∞–ø–∏—Å—É—î–º–æ')
                        case 'o':
                            db.delete_task({'type': 'heard', 'word': data[2]})
                            db.new_task('heard', data[2], rate)
                            await call.answer(f'{data[2]} ‚Üí üóÉ –ù–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è')
                            db.add_action(f'üëÇüèª {call.from_user.full_name} —á–∞—Å—Ç–æ —á—É—î "{data[2]}".  üóÉ –ù–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è')

                case 'whitelist':
                    match data[1]:
                        case 'addme':
                            temp[call.from_user.id] = call.from_user.full_name
                            await call.message.answer('‚åõÔ∏è –û–∫–µ–π, –ø–∞–Ω –†–æ–º–∞–Ω—á–∏–∫ –ø–µ—Ä–µ–≥–ª—è–Ω–µ –í–∞—à—É –∑–∞—è–≤–∫—É. –ó–∞—á–µ–∫–∞–π—Ç–µ...', reply_markup=kb.close)
                            await bot.send_message(1041234545, f'–ï–π! <i>{call.from_user.full_name}</i> —Ö–æ—á–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑—ñ —Å–ª–æ–≤–∞–º–∏.\n - ID: <i>{call.from_user.id}</i>\n - Username: <i>@{call.from_user.username}</i>\n\n–®–æ —Ä–æ–±–∏—Ç–∏?', 'HTML', reply_markup=kb.whitelist(call.from_user))
                        case 'accept':
                            if call.from_user.id in temp: name = temp[call.from_user.id]; temp.pop(call.from_user.id)
                            else: name = "–ù–µ–≤—ñ–¥–æ–º–æ"
                            db.new_user(int(data[2]), name, data[3])
                            await bot.send_message(int(data[2]), 'ü•≥ –í—ñ—Ç–∞—é! –í–∏ –ø—Ä–∏–π—Ç—è—Ç—ñ.\n–ü–∞–Ω –†–æ–º—á—ñ–∫ –¥–æ–≤–æ–ª—å–Ω–∏–π —Ç–∏–º, —â–æ –í–∏ –±–∞–∂–∞—î—Ç–µ –π–æ–º—É –¥–æ–ø–æ–º–æ–≥—Ç–∏!üíö\n\n/menu - –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é.\n–ù–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –ø–µ—Ä—à—ñ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é, –í–∏ –ø–æ—á–Ω–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.\n–î–∞–ª—ñ —Ä–æ–∑–±–µ—Ä–µ—Ç–µ—Å—è —Å–∞–º—ñ)\n\n‚ùóÔ∏è –û–¥–Ω–∞–∫ –ø–∞–º‚Äô—è—Ç–∞–π—Ç–µ, —â–æ –∑–∞ –ø–æ–≥–∞–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É —ñ –ø–æ–≥–∞–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–∞–Ω –†–æ–º—á–∏—á –º–æ–∂–µ –í–∞—Å –∑–∞–±–∞–Ω–∏—Ç–∏. –¢–æ–º—É –Ω–µ —Ä–æ–±—ñ—Ç—å –¥—É—Ä–Ω–∏—Ü—å.', reply_markup=kb.to_menu)
                        case 'reject':
                            await bot.send_message(int(data[2]), '‚õîÔ∏è –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –í–∞—à—É –∑–∞—è–≤–∫—É –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ(', reply_markup=kb.close)
                 
    try: await call.message.delete()
    except: pass

async def del_last_msg(user_id:int):
    msg = db.get_lm(user_id)
    if not msg is None:
        try: await bot.delete_message(user_id, msg)
        except: pass


""" –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –º–µ–Ω–µ """
@dp.message_handler(commands=['admin'], commands_prefix='!/')
async def admin_cmd(message: types.Message):
    await message.delete()
    if message.from_user.username != config.DEV_TG_NICKNAME: await message.answer("–Ω–æ-–Ω–æ, —à–µ –∑–∞–º–∞–ª–∏–π", reply_markup=kb.close); return
    await message.answer("üÉè –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏\n\n/admin ‚Üí –í—Å—ñ —Å–ø–µ—Ü. –∫–æ–º–∞–Ω–¥–∏\n/ban (id) ‚Üí –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n/unban (id) ‚Üí –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n/blacklist ‚Üí –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n/userlist ‚Üí –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", reply_markup=kb.close)

@dp.message_handler(commands=['ban'], commands_prefix='!/')
async def ban_cmd(message: types.Message):
    await message.delete()
    if message.from_user.username != config.DEV_TG_NICKNAME: await message.answer("–Ω–æ-–Ω–æ, —à–µ –∑–∞–º–∞–ª–∏–π", reply_markup=kb.close); return
    _id = message.get_args()
    if _id == '': await message.answer("‚ùóÔ∏è –¢–∞–∫ –∫–æ–≥–æ –±–∞–Ω–∏—Ç–∏? –î–µ ID?\n/ban (id)", reply_markup=kb.close); return
    elif not _id.isdigit(): await message.answer("‚ùóÔ∏è —Ç–∞ –Ω–∞–ø–∏—à–∏ –ø–æ-–ª—é—Ü–∫–∏.\n/ban (id)", reply_markup=kb.close); return

    _id = int(_id)
    user = db.get_user(_id)
    if user is None: await message.answer("‚ùóÔ∏è –£ –Ω–∞—Å –Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n/userlist ‚Üí –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", reply_markup=kb.close); return

    db.ban_user(_id)
    await message.answer(f"üî¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '<b>{user['name']}</b>' (@{user['username']}) –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!\n–©–æ–± —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ ‚Üí <code>/unban {_id}</code>", 'HTML', reply_markup=kb.close)
    await del_last_msg(_id)
    await bot.send_message(_id, 'üî¥ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ—á–∏–Ω—Ç–µ! –í–∏ —Å–µ–±–µ –¥—É–∂–µ –¥–æ–±—Ä–µ –ø—Ä–æ—è–≤–∏–ª–∏ —ñ —Ç–æ–º—É –≤–∞—Å –ó–ê–ë–õ–û–ö–û–í–ê–ù–û!\n–ù–µ –æ—á—ñ–∫—É–≤–∞–Ω–æ, –ø—Ä–∞–≤–¥–∞?')
@dp.message_handler(commands=['unban'], commands_prefix='!/')
async def unban_cmd(message: types.Message):
    await message.delete()
    if message.from_user.username != config.DEV_TG_NICKNAME: await message.answer("–Ω–æ-–Ω–æ, —à–µ –∑–∞–º–∞–ª–∏–π", reply_markup=kb.close); return
    _id = message.get_args()
    if _id == '': await message.answer("‚ùóÔ∏è –¢–∞–∫ –∫–æ–≥–æ —Ä–æ–∑–±–∞–Ω–∏—Ç–∏? –î–µ ID?\n/unban (id)", reply_markup=kb.close); return
    elif not _id.isdigit(): await message.answer("‚ùóÔ∏è —Ç–∞ –Ω–∞–ø–∏—à–∏ –ø–æ-–ª—é—Ü–∫–∏.\n/unban (id)", reply_markup=kb.close); return

    _id = int(_id)
    user = db.get_user(_id)
    if user is None: await message.answer("‚ùóÔ∏è –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.\n/blacklist ‚Üí –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", reply_markup=kb.close); return

    db.unban_user(_id)
    await message.answer(f"üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '<b>{user['name']}</b>' (@{user['username']}) –†–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!\n–©–æ–± –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ ‚Üí <code>/ban {_id}</code>", 'HTML', reply_markup=kb.close)
    await del_last_msg(_id)
    await bot.send_message(_id, 'üü¢ –í–∞—Å —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!', reply_markup=kb.to_menu)

@dp.message_handler(commands=['blacklist'], commands_prefix='!/')
async def blacklist_cmd(message: types.Message):
    await message.delete()
    if message.from_user.username != config.DEV_TG_NICKNAME: await message.answer("–Ω–æ-–Ω–æ, —à–µ –∑–∞–º–∞–ª–∏–π", reply_markup=kb.close); return
    text = 'üëø –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
    for _id in db.blacklist:
        u = db.get_user(_id)
        text += f"\n ‚Äî {u['name']} (@{u['username']}) ‚Üí <code>{_id}</code>"
    text = text.replace('(@None)', '')
    await message.answer(text, 'HTML', reply_markup=kb.close)
@dp.message_handler(commands=['userlist'], commands_prefix='!/')
async def userlist_cmd(message: types.Message):
    await message.delete()
    if message.from_user.username != config.DEV_TG_NICKNAME: await message.answer("–Ω–æ-–Ω–æ, —à–µ –∑–∞–º–∞–ª–∏–π", reply_markup=kb.close); return
    text = 'üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
    for _id in db.whitelist:
        u = db.get_user(_id)
        text += f"\n ‚Äî {u['name']} (@{u['username']}) ‚Üí <code>{_id}</code>"
    text = text.replace('(@None)', '')
    await message.answer(text, 'HTML', reply_markup=kb.close)

if __name__ == "__main__":
    print("Bot is running")
    executor.start_polling(dp, skip_updates=True)
